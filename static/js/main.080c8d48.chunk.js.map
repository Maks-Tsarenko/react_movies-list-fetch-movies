{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","addMovie","useState","setTitle","isError","setIsError","setMovie","isLoading","setIsLoading","changeFormat","foundMovie","newFormatMovie","Title","Plot","Poster","imdbID","searchMovie","inputQuery","a","query","fetch","then","res","json","catch","Response","Error","newMovie","handleSubmit","event","preventDefault","onSubmit","htmlFor","type","id","placeholder","onChange","target","value","disabled","trim","classNames","onClick","App","setMovies","listOfMovies","some","film","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.080c8d48.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie.description}\n        <br />\n        <a href={movie.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { useState, ChangeEvent } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { ResponseError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  addMovie: (movie: Movie) => void;\n};\nexport const FindMovie: React.FC<Props> = ({ addMovie }) => {\n  const [title, setTitle] = useState('');\n  const [isError, setIsError] = useState(false);\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleSetInput = (event: ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsError(false);\n  };\n\n  const changeFormat = (foundMovie: MovieData | ResponseError) => {\n    if ('Error' in foundMovie) {\n      setIsError(true);\n\n      return;\n    }\n\n    const newFormatMovie = {\n      title: foundMovie.Title,\n      description: foundMovie.Plot,\n      imgUrl: foundMovie.Poster !== 'N/A'\n        ? foundMovie.Poster\n        : 'https://via.placeholder.com/360x270.png?text=no%20preview',\n      imdbUrl: `https://www.imdb.com/title/${foundMovie.imdbID}`,\n      imdbId: foundMovie.imdbID,\n    };\n\n    setMovie(newFormatMovie);\n  };\n\n  const searchMovie = async (inputQuery: string) => {\n    setIsLoading(true);\n\n    try {\n      const newMovie = await getMovie(inputQuery);\n\n      changeFormat(newMovie);\n    } catch {\n      setIsError(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSubmit = async (event: ChangeEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    searchMovie(title);\n    setIsError(false);\n  };\n\n  const handleAddMovie = () => {\n    if (movie) {\n      addMovie(movie);\n      setMovie(null);\n      setTitle('');\n    }\n  };\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              onChange={handleSetInput}\n              value={title}\n            />\n          </div>\n          {isError && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              disabled={!title.trim()}\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={classNames('button is-light', {\n                'is-loading': isLoading,\n              })}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            {movie && (\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={handleAddMovie}\n              >\n                Add to the list\n              </button>\n            )}\n\n          </div>\n        </div>\n      </form>\n      {movie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=e46d681b';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n\n  const addMovies = (movie: Movie) => {\n    setMovies(listOfMovies => {\n      if (listOfMovies.some(film => film.imdbId === movie.imdbId)) {\n        return listOfMovies;\n      }\n\n      return [...listOfMovies, movie];\n    });\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovies} />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}